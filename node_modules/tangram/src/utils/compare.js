// Basic deep comparison of objects using === test
// Compares HTML elements by reference
export default function compareObjects (a, b) {
    // one or both are null
    if (a == null && b == null) {
        return true;
    }
    else if (a == null || b == null) {
        return false;
    }

    // both can be compared with === (primitives, or HTML elements)
    if ((typeof a !== 'object' && typeof b !== 'object') ||
        a instanceof HTMLElement || b instanceof HTMLElement) {
        // NaN
        if (typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b)) {
            return true;
        }
        // otherwise objects, compare properties directly
        return (a === b);
    }

    // make sure we check all keys
    if (Object.keys(b).length > Object.keys(a).length) {
        [a, b] = [b, a];
    }

    for (let key in a) {
        let aval = a[key];
        let bval = b[key];
        let equal;

        // both can be compared with === (primitives, or HTML elements)
        if ((typeof aval !== 'object' && typeof bval !== 'object') ||
            aval instanceof HTMLElement || bval instanceof HTMLElement) {
            // NaN
            if (typeof aval === 'number' && typeof bval === 'number' && isNaN(aval) && isNaN(bval)) {
                equal = true;
            }
            // otherwise objects, compare properties directly
            else {
                equal = (aval === bval);
            }
        }
        else {
            // if both are (non-DOM) objects, compare recursively
            equal = compareObjects(aval, bval);
        }

        if (!equal) {
            return false; // if any property isn't equal, the objects aren't the same
        }
    }
    return true; // all properties were equal
}

// Deep difference of objects using === test
// Compares HTML elements by reference
export function differenceForObjects (a, b) {
    // one or both are null
    if (a == null && b == null) {
        return;
    }
    else if (a == null || b == null) {
        return true;
    }

    // both can be compared with === (primitives, or HTML elements)
    if ((typeof a !== 'object' && typeof b !== 'object') ||
        a instanceof HTMLElement || b instanceof HTMLElement) {
        // NaN
        if (typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b)) {
            return;
        }
        // otherwise objects, compare properties directly
        return (a !== b) ? true : undefined;
    }

    // make sure we check all keys
    if (Object.keys(b).length > Object.keys(a).length) {
        [a, b] = [b, a];
    }

    let different = {}; // keys that differ between objects
    for (let key in a) {
        let aval = a[key];
        let bval = b[key];

        // both can be compared with === (primitives, or HTML elements)
        if ((typeof aval !== 'object' && typeof bval !== 'object') ||
            aval instanceof HTMLElement || bval instanceof HTMLElement) {
            // compare properties directly (excepting for NaN)
            if (aval !== bval && !(typeof aval === 'number' && typeof bval === 'number' && isNaN(aval) && isNaN(bval))) {
                different[key] = true;
            }
        }
        else {
            // if both are (non-DOM) objects, compare recursively
            let diff = differenceForObjects(aval, bval);
            if (diff) {
                different[key] = diff;
            }
        }
    }
    return Object.keys(different).length > 0 ? different : undefined;
}
